// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: IdMap.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from IdMap.proto</summary>
public static partial class IdMapReflection {

  #region Descriptor
  /// <summary>File descriptor for IdMap.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static IdMapReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtJZE1hcC5wcm90byJ+CgVJZE1hcBIWCg5kYXRhRmlsZU9mZnNldBgBIAEo",
          "BRIqCgppZFRvSWR4TWFwGAIgAygLMhYuSWRNYXAuSWRUb0lkeE1hcEVudHJ5",
          "GjEKD0lkVG9JZHhNYXBFbnRyeRILCgNrZXkYASABKA0SDQoFdmFsdWUYAiAB",
          "KAU6AjgBYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::IdMap), global::IdMap.Parser, new[]{ "DataFileOffset", "IdToIdxMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
        }));
  }
  #endregion

}
#region Messages
public sealed partial class IdMap : pb::IMessage<IdMap> {
  private static readonly pb::MessageParser<IdMap> _parser = new pb::MessageParser<IdMap>(() => new IdMap());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IdMap> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdMapReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdMap() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdMap(IdMap other) : this() {
    dataFileOffset_ = other.dataFileOffset_;
    idToIdxMap_ = other.idToIdxMap_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdMap Clone() {
    return new IdMap(this);
  }

  /// <summary>Field number for the "dataFileOffset" field.</summary>
  public const int DataFileOffsetFieldNumber = 1;
  private int dataFileOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DataFileOffset {
    get { return dataFileOffset_; }
    set {
      dataFileOffset_ = value;
    }
  }

  /// <summary>Field number for the "idToIdxMap" field.</summary>
  public const int IdToIdxMapFieldNumber = 2;
  private static readonly pbc::MapField<uint, int>.Codec _map_idToIdxMap_codec
      = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<uint, int> idToIdxMap_ = new pbc::MapField<uint, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<uint, int> IdToIdxMap {
    get { return idToIdxMap_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IdMap);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IdMap other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DataFileOffset != other.DataFileOffset) return false;
    if (!IdToIdxMap.Equals(other.IdToIdxMap)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DataFileOffset != 0) hash ^= DataFileOffset.GetHashCode();
    hash ^= IdToIdxMap.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DataFileOffset != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DataFileOffset);
    }
    idToIdxMap_.WriteTo(output, _map_idToIdxMap_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DataFileOffset != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataFileOffset);
    }
    size += idToIdxMap_.CalculateSize(_map_idToIdxMap_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IdMap other) {
    if (other == null) {
      return;
    }
    if (other.DataFileOffset != 0) {
      DataFileOffset = other.DataFileOffset;
    }
    idToIdxMap_.Add(other.idToIdxMap_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DataFileOffset = input.ReadInt32();
          break;
        }
        case 18: {
          idToIdxMap_.AddEntriesFrom(input, _map_idToIdxMap_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
