// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Game.Config
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WhiteListCfg : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static WhiteListCfg GetRootAsWhiteListCfg(ByteBuffer _bb) { return GetRootAsWhiteListCfg(_bb, new WhiteListCfg()); }
  public static WhiteListCfg GetRootAsWhiteListCfg(ByteBuffer _bb, WhiteListCfg obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyWhiteListCfg(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, WhiteListCfgVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WhiteListCfg __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Game.Config.WhiteItem? Items(int j) { int o = __p.__offset(4); return o != 0 ? (Game.Config.WhiteItem?)(new Game.Config.WhiteItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Game.Config.WhiteListCfg> CreateWhiteListCfg(FlatBufferBuilder builder,
      VectorOffset itemsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    WhiteListCfg.AddItems(builder, itemsOffset);
    return WhiteListCfg.EndWhiteListCfg(builder);
  }

  public static void StartWhiteListCfg(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(0, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, Offset<Game.Config.WhiteItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, Offset<Game.Config.WhiteItem>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Game.Config.WhiteItem>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Game.Config.WhiteItem>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Game.Config.WhiteListCfg> EndWhiteListCfg(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Game.Config.WhiteListCfg>(o);
  }
  public static void FinishWhiteListCfgBuffer(FlatBufferBuilder builder, Offset<Game.Config.WhiteListCfg> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedWhiteListCfgBuffer(FlatBufferBuilder builder, Offset<Game.Config.WhiteListCfg> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class WhiteListCfgVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Items*/, Game.Config.WhiteItemVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
