// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Game.Config
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WhiteItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static WhiteItem GetRootAsWhiteItem(ByteBuffer _bb) { return GetRootAsWhiteItem(_bb, new WhiteItem()); }
  public static WhiteItem GetRootAsWhiteItem(ByteBuffer _bb, WhiteItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WhiteItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Pid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Groupid { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Itemid { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Currencytype { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Bottomprice { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Game.Config.WhiteItem> CreateWhiteItem(FlatBufferBuilder builder,
      int index = 0,
      int pid = 0,
      int groupid = 0,
      int type = 0,
      int itemid = 0,
      int currencytype = 0,
      int bottomprice = 0) {
    builder.StartTable(7);
    WhiteItem.AddBottomprice(builder, bottomprice);
    WhiteItem.AddCurrencytype(builder, currencytype);
    WhiteItem.AddItemid(builder, itemid);
    WhiteItem.AddType(builder, type);
    WhiteItem.AddGroupid(builder, groupid);
    WhiteItem.AddPid(builder, pid);
    WhiteItem.AddIndex(builder, index);
    return WhiteItem.EndWhiteItem(builder);
  }

  public static void StartWhiteItem(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddPid(FlatBufferBuilder builder, int pid) { builder.AddInt(1, pid, 0); }
  public static void AddGroupid(FlatBufferBuilder builder, int groupid) { builder.AddInt(2, groupid, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(3, type, 0); }
  public static void AddItemid(FlatBufferBuilder builder, int itemid) { builder.AddInt(4, itemid, 0); }
  public static void AddCurrencytype(FlatBufferBuilder builder, int currencytype) { builder.AddInt(5, currencytype, 0); }
  public static void AddBottomprice(FlatBufferBuilder builder, int bottomprice) { builder.AddInt(6, bottomprice, 0); }
  public static Offset<Game.Config.WhiteItem> EndWhiteItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Game.Config.WhiteItem>(o);
  }
}


static public class WhiteItemVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Pid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Groupid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Itemid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Currencytype*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Bottomprice*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
